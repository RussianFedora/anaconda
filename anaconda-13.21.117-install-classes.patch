diff -urN anaconda-13.21.117.orig/installclasses/reremix.py anaconda-13.21.117/installclasses/reremix.py
--- anaconda-13.21.117.orig/installclasses/reremix.py	1970-01-01 03:00:00.000000000 +0300
+++ anaconda-13.21.117/installclasses/reremix.py	2011-10-10 12:28:02.608612494 +0400
@@ -0,0 +1,149 @@
+#
+# rhel.py
+#
+# Copyright (C) 2010  Red Hat, Inc.  All rights reserved.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+from installclass import BaseInstallClass
+from constants import *
+from product import *
+from flags import flags
+import os
+import types
+
+import installmethod
+import yuminstall
+
+class InstallClass(BaseInstallClass):
+    # name has underscore used for mnemonics, strip if you dont need it
+    id = "reremix"
+    name = N_("RERemix")
+    _description = N_("The default installation of %s is a minimum install. "
+                     "You can optionally select a different set of software "
+                     "now.")
+    _descriptionFields = (productName,)
+    sortPriority = 10000
+    hidden = 1
+
+    bootloaderTimeoutDefault = 5
+    bootloaderExtraArgs = "crashkernel=auto"
+
+    tasks = [(N_("GNOME Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "basic-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("KDE Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "kde-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("XFCE Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "xfce-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("Virtual Host"),
+              ["base", "console-internet", "core", "debugging",
+               "directory-client", "hardware-monitoring", "java-platform",
+               "large-systems", "network-file-system-client",
+               "performance", "perl-runtime", "server-platform",
+               "virtualization", "virtualization-client",
+               "virtualization-platform"]),
+             (N_("Minimal"),
+              ["core"])]
+
+    def getPackagePaths(self, uri):
+        if not type(uri) == types.ListType:
+            uri = [uri,]
+
+        return {productName: uri}
+
+    def setInstallData(self, anaconda):
+        BaseInstallClass.setInstallData(self, anaconda)
+        BaseInstallClass.setDefaultPartitioning(self,
+                                                anaconda.id.storage,
+                                                anaconda.platform)
+
+    def setSteps(self, anaconda):
+        BaseInstallClass.setSteps(self, anaconda)
+        anaconda.dispatch.skipStep("partition")
+
+    def getBackend(self):
+        if flags.livecdInstall:
+            import livecd
+            return livecd.LiveCDCopyBackend
+        else:
+            return yuminstall.YumBackend
+
+    def productMatches(self, oldprod):
+        if oldprod is None:
+            return False
+
+        if oldprod.startswith(productName):
+            return True
+
+        productUpgrades = {
+            "Red Hat Enterprise Linux AS": ("Red Hat Linux Advanced Server", ),
+            "Red Hat Enterprise Linux WS": ("Red Hat Linux Advanced Workstation",),
+            # FIXME: this probably shouldn't be in a release...
+            "Red Hat Enterprise Linux": ("Red Hat Linux Advanced Server",
+                                         "Red Hat Linux Advanced Workstation",
+                                         "Red Hat Enterprise Linux AS",
+                                         "Red Hat Enterprise Linux ES",
+                                         "Red Hat Enterprise Linux WS"),
+            "Red Hat Enterprise Linux Server": ("Red Hat Enterprise Linux AS",
+                                                "Red Hat Enterprise Linux ES",
+                                                "Red Hat Enterprise Linux WS",
+                                                "Red Hat Enterprise Linux"),
+            "Red Hat Enterprise Linux Client": ("Red Hat Enterprise Linux WS",
+                                                "Red Hat Enterprise Linux Desktop",
+                                                "Red Hat Enterprise Linux"),
+            "Scientific Linux": ("Scientific Linux"),
+            "RERemix": ("RERemix"),
+        }
+
+        if productUpgrades.has_key(productName):
+            acceptable = productUpgrades[productName]
+        else:
+            acceptable = ()
+
+        for p in acceptable:
+            if oldprod.startswith(p):
+                return True
+
+        return False
+
+    def versionMatches(self, oldver):
+        oldMajor = oldver.split(".")[0]
+        newMajor = productVersion.split(".")[0]
+
+        return oldMajor == newMajor
+
+    def __init__(self):
+        BaseInstallClass.__init__(self)
diff -urN anaconda-13.21.117.orig/installclasses/rhel.py anaconda-13.21.117/installclasses/rhel.py
--- anaconda-13.21.117.orig/installclasses/rhel.py	2011-10-10 11:32:09.111827259 +0400
+++ anaconda-13.21.117/installclasses/rhel.py	2011-10-10 12:27:56.564495709 +0400
@@ -29,8 +29,8 @@
 
 class InstallClass(BaseInstallClass):
     # name has underscore used for mnemonics, strip if you dont need it
-    id = "rhel"
-    name = N_("Red Hat Enterprise Linux")
+    id = "reremix"
+    name = N_("RERemix")
     _description = N_("The default installation of %s is a minimum install. "
                      "You can optionally select a different set of software "
                      "now.")
@@ -41,7 +41,41 @@
     bootloaderTimeoutDefault = 5
     bootloaderExtraArgs = "crashkernel=auto"
 
-    tasks = [(N_("Minimal"),
+    tasks = [(N_("GNOME Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "basic-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("KDE Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "kde-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("XFCE Desktop"),
+              ["base", "core", "debugging",
+               "java-platform", "network-file-system-client",
+               "server-platform",
+               "fonts", "print-client",
+               "xfce-desktop", "desktop-debugging", "desktop-platform",
+               "general-desktop", "graphical-admin-tools", "input-methods",
+               "legacy-x", "x11", "internet-browser", "internet-applications", "office-suite",
+               "remote-desktop-clients"]),
+             (N_("Virtual Host"),
+              ["base", "console-internet", "core", "debugging",
+               "directory-client", "hardware-monitoring", "java-platform",
+               "large-systems", "network-file-system-client",
+               "performance", "perl-runtime", "server-platform",
+               "virtualization", "virtualization-client",
+               "virtualization-platform"]),
+             (N_("Minimal"),
               ["core"])]
 
     def getPackagePaths(self, uri):
@@ -90,6 +124,8 @@
             "Red Hat Enterprise Linux Client": ("Red Hat Enterprise Linux WS",
                                                 "Red Hat Enterprise Linux Desktop",
                                                 "Red Hat Enterprise Linux"),
+            "Scientific Linux": ("Scientific Linux"),
+            "RERemix": ("RERemix"),
         }
 
         if productUpgrades.has_key(productName):
